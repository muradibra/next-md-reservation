generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(cuid())
  externalId String @unique
  email      String @unique
  name       String

  role         Role          @default(USER)
  reservations Reservation[]
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  specialty String
  imgUrl    String @default("")

  timeSlots    TimeSlot[]
  reservations Reservation[]
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeSlot {
  id        String   @id @default(cuid())
  doctorId  String
  date      DateTime
  hour      String
  available Boolean  @default(true)

  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  reservation Reservation?

  @@unique([doctorId, date, hour])
}

model Reservation {
  id       String  @id @default(cuid())
  userId   String
  doctorId String
  slotId   String  @unique
  status   String
  message  String?

  user     User     @relation(fields: [userId], references: [externalId])
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  timeSlot TimeSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, doctorId, slotId])
}

model Review {
  id       String @id @default(cuid())
  userId   String
  doctorId String
  rating   Float
  title    String
  comment  String
  user     User   @relation(fields: [userId], references: [externalId])
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
